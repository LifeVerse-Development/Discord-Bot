stages:
  - deploy

variables:
  GITHUB_REPO: "LifeVerse-Development/Discord-Bot"
  GIT_AUTHOR_NAME: "LifeVerse-Development"
  GIT_AUTHOR_EMAIL: "lifeversegame@gmail.com"
  GIT_COMMITTER_NAME: "GitLab CI/CD"
  GIT_COMMITTER_EMAIL: "gitlab-ci@example.com"

deploy_to_github:
  stage: deploy
  script:
    - echo "Starte Deployment nach GitHub..."
    
    # Git konfigurieren
    - git config --global user.name "$GIT_AUTHOR_NAME"
    - git config --global user.email "$GIT_AUTHOR_EMAIL"
    
    # Repository in temporäres Verzeichnis klonen
    - git clone --mirror https://oauth2:${GITHUB_TOKEN}@github.com/${GITHUB_REPO}.git temp-repo
    - cd temp-repo
    
    # GitHub-Repository mit neuem Stand aktualisieren
    - git remote add gitlab-origin $CI_REPOSITORY_URL
    - git fetch gitlab-origin --tags
    - git push --mirror https://oauth2:${GITHUB_TOKEN}@github.com/${GITHUB_REPO}.git
    
    # Temporäres Verzeichnis entfernen, bevor die Version erstellt wird
    - cd ..
    - rm -rf temp-repo
    
    # Version generieren (z. B. basierend auf Datum + Pipeline-ID)
    - VERSION="v$(date +'%Y%m%d').$CI_PIPELINE_ID"
    - echo "Version: $VERSION"
    
    # Tag erstellen und pushen
    - git tag "$VERSION"
    - git push https://oauth2:${GITHUB_TOKEN}@github.com/${GITHUB_REPO}.git "$VERSION"

  only:
    - main